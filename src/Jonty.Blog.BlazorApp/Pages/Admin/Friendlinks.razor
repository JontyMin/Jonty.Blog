@page "/admin/friendlinks"
@using Jonty.Blog.BlazorApp.Response.Blog.Params

<AdminLayout>
	@if (friendlinks == null)
	{
<Loading /> }
				else
				{
<div class="post-wrap categories">
	<h2 class="post-title">-&nbsp;FriendLinks&nbsp;-</h2>
	@if (friendlinks.Success && friendlinks.Result.Any())
	{
<div class="categories-card">
	@foreach (var item in friendlinks.Result)
	{
<div class="card-item">
	<div class="categories">
		<NavLink title="❌删除" @onclick="@(async () => await DeleteAsync(item.Id))">❌</NavLink>
		<NavLink title="📝编辑" @onclick="@(() => ShowBox(item))">📝</NavLink>
		<NavLink target="_blank" href="@item.LinkUrl">
			<h3>@item.Title</h3>
		</NavLink>
	</div>
</div>}
	<div class="card-item">
		<div class="categories">
			<NavLink><h3 @onclick="@(() => ShowBox())">📒~~~ 新增友链 ~~~📒</h3></NavLink>
		</div>
	</div>
</div> }
					else
					{
<ErrorTip />}
</div>

					<Box OnClickCallback="@SubmitAsync" Open="@Open">
						<div class="box-item">
							<b>Title：</b><input type="text" @bind="@title" @bind:event="oninput" />
						</div>
						<div class="box-item">
							<b>LinkUrl：</b><input type="text" @bind="@linkUrl" @bind:event="oninput" />
						</div>
					</Box>}
</AdminLayout>

@code { /// <summary>
			/// 默认隐藏Box
			/// </summary>
			private bool Open { get; set; } = false;

			/// <summary>
			/// 新增或者更新时候的友链字段值
			/// </summary>
			private string title, linkUrl;

			/// <summary>
			/// 更新友链的Id值
			/// </summary>
			private int id;

			/// <summary>
			/// API返回的友链列表数据
			/// </summary>
			private ServiceResult<IEnumerable<QueryFriendLinkForAdminDto>> friendlinks;

			/// <summary>
			/// 初始化
			/// </summary>
			/// <returns></returns>
			protected override async Task OnInitializedAsync()
			{
				var token = await Common.GetStorageAsync("token");
				Http.DefaultRequestHeaders.Add("Authorization", $"Bearer {token}");

				friendlinks = await FetchData();
			}

			/// <summary>
			/// 获取数据
			/// </summary>
			/// <returns></returns>
			private async Task<ServiceResult<IEnumerable<QueryFriendLinkForAdminDto>>> FetchData()
			{
				return await Http.GetFromJsonAsync<ServiceResult<IEnumerable<QueryFriendLinkForAdminDto>>>("/blog/admin/friendlinks");
			}

			/// <summary>
			/// 删除分类
			/// </summary>
			/// <param name="id"></param>
			/// <returns></returns>
			private async Task DeleteAsync(int id)
			{
				Open = false;

				// 弹窗确认
				bool confirmed = await Common.InvokeAsync<bool>("confirm", "\n💥💢真的要干掉这个该死的友链吗💢💥");

				if (confirmed)
				{
					var response = await Http.DeleteAsync($"/blog/friendlink?id={id}");

					var result = await response.Content.ReadFromJsonAsync<ServiceResult>();

					if (result.Success)
					{
						friendlinks = await FetchData();
					}
				}
			}

			/// <summary>
			/// 显示box，绑定字段
			/// </summary>
			/// <param name="dto"></param>
			private void ShowBox(QueryFriendLinkForAdminDto dto = null)
			{
				Open = true;
				id = 0;

				// 新增
				if (dto == null)
				{
					title = null;
					linkUrl = null;
				}
				else // 更新
				{
					id = dto.Id;
					title = dto.Title;
					linkUrl = dto.LinkUrl;
				}
			}

			/// <summary>
			/// 确认按钮点击事件
			/// </summary>
			/// <returns></returns>
			private async Task SubmitAsync()
			{
				var input = new EditFriendLinkInput()
				{
					Title = title.Trim(),
					LinkUrl = linkUrl.Trim()
				};

				if (string.IsNullOrEmpty(input.Title) || string.IsNullOrEmpty(input.LinkUrl))
				{
					return;
				}

				var responseMessage = new HttpResponseMessage();

				if (id > 0)
					responseMessage = await Http.PutAsJsonAsync($"/blog/friendlink?id={id}", input);
				else
					responseMessage = await Http.PostAsJsonAsync("/blog/friendlink", input);

				var result = await responseMessage.Content.ReadFromJsonAsync<ServiceResult>();
				if (result.Success)
				{
					friendlinks = await FetchData();
					Open = false;
				}
			} }