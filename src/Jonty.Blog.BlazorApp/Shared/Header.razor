<header>
	<nav class="navbar">
		<div class="container">
			<div class="navbar-header header-logo">
				<NavLink class="menu-item" href="/">
					Jonty
				</NavLink>
			</div>
			<div class="menu navbar-right">
				<NavLink class="menu-item" href="posts">Posts</NavLink>
				<NavLink class="menu-item" href="categories">Categories</NavLink>
				<NavLink class="menu-item" href="tags">Tags</NavLink>
				<NavLink class="menu-item apps" href="apps">Apps</NavLink>
				<input id="switch_default"
					   type="checkbox"
					   class="switch_default"
					   @onchange="SwitchTheme"
					   checked="@(currentTheme == "Dark")" />
				<label for="switch_default" class="toggleBtn"></label>
			</div>
		</div>
	</nav>
	<nav class="navbar-mobile">
		<div class="container">
			<div class="navbar-header">
				<div>
					<NavLink class="menu-item" href="/">Jonty</NavLink>
					<NavLink @onclick="SwitchTheme">&nbsp;·&nbsp;@currentTheme</NavLink>
				</div>
				<div class="menu-toggle" @onclick="ToggleNavMenu">&#9776; Menu</div>
			</div>
			<div class="menu @NavMenuCssClass">
				<NavLink class="menu-item" href="posts">Posts</NavLink>
				<NavLink class="menu-item" href="categories">Categories</NavLink>
				<NavLink class="menu-item" href="tags">Tags</NavLink>
				<NavLink class="menu-item apps" href="apps">Apps</NavLink>
			</div>
		</div>
	</nav>
</header>

@code { /// <summary>
			/// 下拉菜单是否打开
			/// </summary>
			private bool collapseNavMenu = false;

			/// <summary>
			/// 导航菜单CSS
			/// </summary>
			private string NavMenuCssClass => collapseNavMenu ? "active" : null;

			/// <summary>
			/// 当前主题
			/// </summary>
			private string currentTheme;

			/// <summary>
			/// 显示/隐藏 菜单
			/// </summary>
			private void ToggleNavMenu()
			{
				collapseNavMenu = !collapseNavMenu;
			}

			/// <summary>
			/// 初始化
			/// </summary>
			/// <returns></returns>
			protected override async Task OnInitializedAsync()
			{
				currentTheme = await Common.GetStorageAsync("theme") ?? "Light";

				await Common.InvokeAsync("window.func.switchTheme");
			}

			/// <summary>
			/// 切换主题
			/// </summary>
			private async Task SwitchTheme()
			{
				currentTheme = currentTheme == "Light" ? "Dark" : "Light";

				await Common.SetStorageAsync("theme", currentTheme);

				await Common.InvokeAsync("window.func.switchTheme");

				var uri = await Common.CurrentUri();
				if (uri.AbsolutePath.StartsWith("/admin/post"))
				{
					await Common.SwitchEditorTheme(currentTheme);
				}
			} }